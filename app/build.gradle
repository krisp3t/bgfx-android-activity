apply plugin: 'com.android.application'

android {
    namespace 'com.krisp3t.bgfx.examples'
    defaultConfig {
        applicationId 'com.krisp3t.bgfx.examples'
        compileSdk 33
        minSdk 23
        targetSdk 26
        versionCode 100 // Application version, 3 digits, major/minor/revision
        versionName "1.0.0"
    }
    // One APK per ABI. Generate also one multi-abi APK.
    splits {
        abi {
            enable true
            reset()
            include 'arm64-v8a'
            universalApk true
        }
    }

    // Helper function to determine host-specific NDK directory
    String osName = System.getProperty("os.name").toLowerCase()
    String osArch = System.getProperty("os.arch").toLowerCase()
    String toolchainOs = "";
    if (osName.contains("win")) {
        toolchainOs = "windows-x86_64"
    } else if (osName.contains("linux")) {
        toolchainOs = "linux-x86_64"
    } else if (osName.contains("mac os x") || osName.contains("darwin")) {
        toolchainOs = (osArch == "aarch64" || osArch.contains("arm64")) ? "darwin-arm64" : "darwin-x86_64"
    } else {
        throw new GradleException("Unsupported OS: ${osName}")
    }

    // Helper function to generate a unique version code per application version and per abi
    // Method comes from https://androidbycode.wordpress.com/2015/07/07/android-ndk-a-guide-to-deploying-apps-with-native-libraries/
    project.ext.versionCodes = ['armeabi': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3, 'mips': 5, 'mips64': 6, 'x86': 8, 'x86_64': 9]
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            output.versionCodeOverride =
                    project.ext.versionCodes.get(output.getFilter(
                            com.android.build.OutputFile.ABI), 0) * 10000000 + android.defaultConfig.versionCode
        }
    }

    // Helper function to synchronize our natives libs in JNI directories
    project.ext.nativeBuildsDirsAbis = ['arm64-v8a': 'android-arm64']
    project.ext.toolchainDirsAbis = ['arm64-v8a': 'aarch64-linux-android']
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def abiName = output.getFilter(com.android.build.OutputFile.ABI)
            def nativeBuildDir = project.ext.nativeBuildsDirsAbis.get(abiName)
            def toolchainBuildDir = project.ext.toolchainDirsAbis.get(abiName)
            if (nativeBuildDir != null) {
                project.logger.lifecycle("Setting up copy tasks for ABI: ${abiName}")
                def destDir = new File(projectDir, "src/main/jniLibs/${abiName}")
                destDir.mkdirs()

                // First task: Copy our native (bgfx) lib
                def task1 = project.tasks.register("synchronizeJni_${abiName}${variant.name}", Copy) {
                    def libPath = new File(projectDir, "../external/bgfx/.build/${nativeBuildDir}/bin/libexamplesDebug.so")
                    assert libPath.exists()
                    from(libPath)
                    into(destDir)

                }
                // Second task: Copy libc++_shared from NDK
                def task2 = project.tasks.register("synchronizeJniLibC++_${abiName}${variant.name}", Copy) {
                    def libPath = new File("${System.getenv('ANDROID_NDK_ROOT')}/toolchains/llvm/prebuilt/${toolchainOs}/sysroot/usr/lib/${toolchainBuildDir}/libc++_shared.so")
                    assert libPath.exists()
                    from(libPath)
                    into(destDir)
                }
                // Ensure tasks run before build
                variant.preBuildProvider.configure { preBuildTask ->
                    preBuildTask.dependsOn(task1, task2)
                }
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            jniDebuggable true
            minifyEnabled false
            shrinkResources false
            packagingOptions {
                jniLibs.keepDebugSymbols += '**/*.so'
            }
        }
    }
}

dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
}
